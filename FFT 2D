from cmath import exp
from cmath import pi
import numpy as np

def fft_recursive(A):
    n=len(A)
    if n==1:
        return(A)
    wn=exp(-2*pi*1j/n)
    w=1
    A0=[A[2*k] for k in range(0,n//2)]
    A1=[A[2*k+1] for k in range(0,n//2)]
    Y0=fft_recursive(A0)
    Y1=fft_recursive(A1)
    Y=[0 for i in range(n)]
    for k in range(0,n//2):
        Y[k]=Y0[k]+w*Y1[k]
        Y[k+n//2]=Y0[k]-w*Y1[k]
        w=w*wn
    return(Y)

def G(mat,u,y):
    A=[mat[x][y] for x in range(T)]
    return ( fft_recursive(A) )
    
def F(mat,u,v):
    A=[G(mat,u,y) for y in range(T)]
    return ( fft_recursive(A) )

def FFT2D(mat):
    n=len(mat)
    FFTmat=[[F(mat,u,v) for u in range(n)] for v in range(n)]
    return (FFTmat)
    
